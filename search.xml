<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>升级hexo为https</title>
      <link href="/2019/07/11/%E5%8D%87%E7%BA%A7hexo%E4%B8%BAhttps/"/>
      <url>/2019/07/11/%E5%8D%87%E7%BA%A7hexo%E4%B8%BAhttps/</url>
      
        <content type="html"><![CDATA[<p>本文借鉴于<a href="https://segmentfault.com/a/1190000015641918" target="_blank" rel="noopener">思否@chan_chun</a></p><h2 id="获取免费证书"><a href="#获取免费证书" class="headerlink" title="获取免费证书"></a>获取免费证书</h2><ul><li><strong>克隆letsencrypt客户端</strong><ul><li>创建文件夹 <code>/opt/letsencrypt</code></li><li><code>$ git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt</code></li></ul></li></ul><h2 id="注册证书"><a href="#注册证书" class="headerlink" title="注册证书"></a>注册证书</h2><ul><li><strong>Nginx指向静态路径注册证书</strong></li></ul><p>注册一个域名证书非常简单,使用letsencrypt就能生成https所需的证书。当然，用letsencrypt生成的证书只支持域名验证，只需要用letsenctypt的自动注册证书命令，证明这个域名是自己的是用的即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/letsencrypt</span><br><span class="line">$ ./letsencrypt-auto certonly -a webroot --webroot-path=/var/www/me -d me.chanchun.com.cn # 可以使用多个 -d 添加多个域名</span><br></pre></td></tr></table></figure><p>letsencrypt可以帮我们自动注册证书，<code>--webroot-path</code>是静态资源所指的路径。<code>-d</code>是域名域名，也可以多个<code>-d</code>增加多个域名。最后确保使用https的域名都被letsencrypt注册。</p><p>后续将会让你继续输入邮箱信息</p><p>如果出现Congratulations!字样，则证明证书已被自动注册。</p><ul><li><strong>Nginx配置</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.eastwo.com;</span><br><span class="line"> </span><br><span class="line">        location / &#123;</span><br><span class="line">           root   /home/hexo;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">#HTTPS server</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  www.eastwo.com; # 这里写你的域名</span><br><span class="line"></span><br><span class="line">        ssl_certificate      /etc/letsencrypt/live/www.eastwo.com/fullchain.pem; # 中间填写你的域名</span><br><span class="line">        ssl_certificate_key  /etc/letsencrypt/live/www.eastwo.com/privkey.pem; # 中间填写你的域名</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">            root   /home/hexo;  # 这里写你的静态文件目录</span><br><span class="line">            index  index.html index.htm; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>常见错误</strong>：nginx.conf保存退出后，在重启nginx时报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] the &quot;ssl&quot; parameter requires ngx_http_ssl_module in /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>Nginx如果未开启SSL模块，配置Https时提示错误</p><p>原因也很简单，nginx缺少http_ssl_module模块，编译安装的时候带上–with-http_ssl_module配置就行了，但是现在的情况是我的nginx已经安装过了，怎么添加模块，其实也很简单，往下看： 做个说明：我的nginx的安装目录是/usr/local/nginx这个目录，我的源码包在/root/nginx-1.6.2目录</p><p>切换到源码包：    </p><p><code>cd /root/nginx-1.6.2</code></p><p>查看nginx原有的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`/usr/local/nginx/sbin/nginx -V`</span><br></pre></td></tr></table></figure><p>运行上面的命令即可，等配置完，配置完成后，运行命令</p><p><code>make</code></p><p>这里不要进行make install，否则就是覆盖安装</p><p>然后备份原有已安装好的nginx</p><p><code>cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</code></p><p>然后将刚刚编译好的nginx覆盖掉原有的nginx（这个时候nginx要停止状态）</p><p><code>cp ./objs/nginx /usr/local/nginx/sbin/</code></p><p>然后启动nginx，仍可以通过命令查看是否已经加入成功</p><p><code>/usr/local/nginx/sbin/nginx -V</code></p><h2 id="http转https"><a href="#http转https" class="headerlink" title="http转https"></a>http转https</h2><p>在nginx.conf添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.eastwo.com;</span><br><span class="line"> return 301 https://hostrequest_uri; #将http的请求转发为https</span><br><span class="line">        location / &#123;</span><br><span class="line">           root   /home/hexo;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##自动更新证书</p><p>letsencrypt证书最多只有90天，90天之后我们需要重新注册证书，当然这个可以交给服务器自己做啦。</p><ul><li><strong>验证自己的证书是否可以更新</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/letsencrypt</span><br><span class="line">$ ./letsencrypt-auto renew --dry-run</span><br></pre></td></tr></table></figure><blockquote><p>此命令只是验证 不会更新证书</p></blockquote><p>如果出现Congratulations!字样或者已经更新字样则证明可以自动更新。</p><ul><li><p><strong>编写crontab脚本</strong></p><p><code>$ crontab -e</code></p><p>脚本内容</p><p><code>30 2 * * 1 /opt/letsencrypt/letsencrypt-auto renew &gt;&gt; /var/log/le-renew.log</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TCP/IP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署到服务器</title>
      <link href="/2019/07/06/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/07/06/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>前言：window hexo 部署到Linux服务器 </p><p>准备：window 安装及配置<a href="https://blog.csdn.net/xiatiancc/article/details/78872157" target="_blank" rel="noopener">Nodejs</a>，<a href="https://blog.csdn.net/u013256816/article/details/54743470" target="_blank" rel="noopener">Git</a><br>      linux安装及配置<a href="https://blog.csdn.net/king_kgh/article/details/74973040" target="_blank" rel="noopener">Nginx</a>，<a href="https://blog.csdn.net/u013256816/article/details/54743470" target="_blank" rel="noopener">Git</a>    </p><h1 id="1-本地Hexo的安装与配置"><a href="#1-本地Hexo的安装与配置" class="headerlink" title="1.本地Hexo的安装与配置"></a>1.本地Hexo的安装与配置</h1><ul><li><p>打开cmd，cd到想要安装的路径</p></li><li><p>安装淘宝镜像<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li><li><p>安装Hexo<code>cnpm install -g hexo-cli</code>  查看是否安装<code>hexo -v</code></p></li><li><p>创建Hexo文件保存目录<code>mkdir blog</code></p></li><li><p><code>cd blog</code> 开启Hexo <code>hexo init</code>   hexo初始文件会自动安装在blog路径下</p></li><li><p>然后安装两个插件， <code>hexo-deployer-git</code> 和 <code>hexo-server</code> ,这俩插件的作用分别是使用Git部署，和本地测试服务器。 </p><p><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git帮助文档</a> </p><p><a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">hexo-server帮助文档</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hero-server</span><br></pre></td></tr></table></figure></li><li><p><code>hexo s</code>（hexo server）</p><p>现在便可以打开浏览器访问 <code>http://localhost:4000</code> 来查看我们的博客了！ </p></li><li><p>使用 <code>hexo new &lt;文章名称&gt;</code> 来新建文章，该命令会成成一个 <code>.md</code>文件放置在 <code>sources/_posts</code>文件夹。 </p></li><li><p>编辑完毕以后， 使用<code>hexo g</code>将 <code>.md</code>文件渲染成静态文件，并且会在blog里生成public文件夹，然后再启动<code>hexo s</code>就可以看到新增的文章</p></li></ul><h1 id="2-服务器Git自动化部署"><a href="#2-服务器Git自动化部署" class="headerlink" title="2.服务器Git自动化部署"></a>2.服务器Git自动化部署</h1><p>我们使用git-hook这个勾子，当git有更新的时候就会调用这个勾子。</p><ul><li><p>cd到想要创建勾子的目录<code>mkdir /home/git</code>   <code>cd /home/git</code></p></li><li><p><code>git init --bare blog.git</code>(–bare创建一个空仓库)</p></li><li><p>在  空仓库的 <strong>hooks</strong>文件夹中， 新建<strong>post-receive</strong>文件。</p><p><code>vim blog.git/hooks/post-receive</code></p><p>添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>保存后，要赋予这个文件可执行权限 </p><p><code>chmod +x post-receive</code></p></li></ul><ul><li><p>配置本地<code>_config.yml</code></p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: root(服务器当前用户!!!)@ip地址:/home/git/blog.git    //&lt;repository url&gt;</span><br><span class="line">    branch: master            //这里填写分支   [branch]</span><br></pre></td></tr></table></figure></li><li><p>完成配置</p></li><li><p>常见错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bash: git-receive-pack: command not found</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">[41mFATAL[49m Something&apos;s wrong. Maybe you can find the solution here: [4mhttps://hexo.io/docs/troubleshooting.html[24m</span><br><span class="line">[33mError: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (G:\java\nodejs\blog\node_modules\hexo-util\lib\spawn.js:52:19)</span><br><span class="line">    at ChildProcess.emit (events.js:198:13)</span><br><span class="line">    at ChildProcess.cp.emit (G:\java\nodejs\blog\node_modules\cross-spawn\lib\enoent.js:40:29)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:248:12)[39m</span><br></pre></td></tr></table></figure><p>这是当前用户没有权限 我就是下面这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@ip地址:/home/git/blog.git    //&lt;repository url&gt;</span><br><span class="line">    branch: master            //这里填写分支   [branch]</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-本地SSH免密登录"><a href="#3-本地SSH免密登录" class="headerlink" title="3.本地SSH免密登录"></a>3.本地SSH免密登录</h1><p>如果每次<code>ssh</code>或者<code>hexo d</code>都要输入密码 很麻烦</p><ul><li><p>首先在本地生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>系统会提示输入地址密码 回车即可</p><p>在目录<code>C:\Users\hp\.ssh</code>会生成id_rsa(私钥)、和id_rsa.pub(公钥)</p><p>编辑<strong>id_rsa.pub</strong> 复制内容</p></li><li><p>在服务器创建文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/.ssh</span><br></pre></td></tr></table></figure></li><li><p>创建<strong>authorized_keys</strong>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>将复制内容粘贴进去，保存并退出</p><p>给予<strong>authorzied_keys</strong>权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.ssh/authorzied_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>本地<code>ssh root(服务器当前用户!!!)@ip地址</code>测试</p><p>(如果还是要密码 建议删除本地密钥 重复上述操作)</p></li></ul><h1 id="附带-4-本地Hexo部署到Github"><a href="#附带-4-本地Hexo部署到Github" class="headerlink" title="(附带)4.本地Hexo部署到Github"></a>(附带)4.本地Hexo部署到Github</h1><ul><li><p>首先登录Github,new 一个<strong>repository</strong>(Repository name必须是<code>yourusername.github.io</code>)</p></li><li><p>配置本地<code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">-  type: git</span><br><span class="line">   repo: https://github.com/yourusername/Repository name.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure></li><li><p>命令三连<code>hexo clean</code> 、 <code>hexo g</code> (hexo generate) 、<code>hexo d</code>(hexo deploy) </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决每次进入命令都要重新source etcprofile</title>
      <link href="/2019/07/04/%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%E8%BF%9B%E5%85%A5%E5%91%BD%E4%BB%A4%E9%83%BD%E8%A6%81%E9%87%8D%E6%96%B0source%20etcprofile/"/>
      <url>/2019/07/04/%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%E8%BF%9B%E5%85%A5%E5%91%BD%E4%BB%A4%E9%83%BD%E8%A6%81%E9%87%8D%E6%96%B0source%20etcprofile/</url>
      
        <content type="html"><![CDATA[<h1 id="解决每次进入命令都要重新source-etc-profile"><a href="#解决每次进入命令都要重新source-etc-profile" class="headerlink" title="解决每次进入命令都要重新source /etc/profile"></a>解决每次进入命令都要重新source /etc/profile</h1><blockquote><p>在Ubuntu中其实是有几个profile这样的文件存在的，我们通常将环境变量设置在/etc/profile这个文件中，这个文件是全局的。看了Ubuntu中几个文件的简要介绍你就明白了。</p><p>/etc/profile:在登录时,操作系 统定制用户环境时使用的第一个文件 ,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。</p><p>/etc /environment:在登录时操作系统使用的第二个文件, 系统在读取你自己的profile前,设置环境文件的环境变量。</p><p>~/.profile: 在登录时用到的第三个文件 是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认 情况下,他设置一些环境变量,执行用户的.bashrc文件。</p><p>/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.</p><p>~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。</p><p>因此如果想避免这样的问题出现，解决措施如下啦：</p><p>在~/.bashrc文件中添加以下代码</p><p>source /etc/profile<br>在~/.bashrc文件中配置环境变量</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat闪退解决方案</title>
      <link href="/2019/07/03/Tomcat%E9%97%AA%E9%80%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/07/03/Tomcat%E9%97%AA%E9%80%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>首先可以右键点击startup.bat，编辑，在文本的最后敲上pause，保存后重新运行startup.bat，这时候窗口不会再一闪而过，而是停留在桌面上（调试成功，把pause去掉即可）。 </p><p>如果有错误信息，这时候会显示出来，可以再根据它的错误提示，上网搜索对应的解决办法，下面是在错误提示窗口遇到过的问题： </p><h4 id="一、-Neither-the-JAVA-HOME-nor-the-JRE-HOME-environment-variable-is-defined"><a href="#一、-Neither-the-JAVA-HOME-nor-the-JRE-HOME-environment-variable-is-defined" class="headerlink" title="一、 Neither the JAVA_HOME nor the JRE_HOME environment variable is defined"></a>一、 Neither the JAVA_HOME nor the JRE_HOME environment variable is defined</h4><p>Tomcat的startup.bat，它调用了catalina.bat,而catalina.bat则调用了setclasspath.bat，只要在setclasspath.bat的开头声明环境变量（红色两行）就可以了，原因是后来较新版本安装完不会自动登记环境变量JAVA_HOME，JRE_HOME。<br>给setclasspath.bat的开头添加红色标记部分，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">rem ---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">rem Set CLASSPATH and Java options</span><br><span class="line"></span><br><span class="line">rem</span><br><span class="line"></span><br><span class="line">rem $Id: setclasspath.bat 505241 2007-02-09 10:22:58Z jfclere $</span><br><span class="line"></span><br><span class="line">rem ---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">set JAVA_HOME=C:\Program Files\Java\jdk1.6.0_20</span><br><span class="line"></span><br><span class="line">set JRE_HOME=C:\Program Files\Java\jre6</span><br><span class="line"></span><br><span class="line">rem Make sure prerequisite environment variables are set</span><br><span class="line"></span><br><span class="line">if not &quot;%JAVA_HOME%&quot; == &quot;&quot; goto gotJdkHome</span><br><span class="line"></span><br><span class="line">if not &quot;%JRE_HOME%&quot; == &quot;&quot; goto gotJreHome</span><br><span class="line"></span><br><span class="line">echo Neither the JAVA_HOME nor the JRE_HOME environment variable is defined</span><br><span class="line"></span><br><span class="line">echo At least one of these environment variable is needed to run this program</span><br><span class="line"></span><br><span class="line">goto exit</span><br></pre></td></tr></table></figure><p>这样在每次运行startup.bat时就自动注册了JAVA_HOME，JRE_HOME。</p><h4 id="二、但重启出现了这个问题"><a href="#二、但重启出现了这个问题" class="headerlink" title="二、但重启出现了这个问题"></a>二、但重启出现了这个问题</h4><p><img src="https://cdn.jsdelivr.net/gh/Eastwood6/Eastwood6.github.io@master/img/blog/1562151422595.png" alt></p><p>当我们按任意的键时cmd窗口又是一闪而过了。但是这已经确定了我们的环境变量都是正确的。 </p><p>为了更加详细的看到信息，我们再来更改一句：找到<code>call &quot;%EXECUTABLE%&quot; start %CMD_LINE_ARGS%</code> 把里面的<strong>start</strong>替换为<strong>run</strong>。</p><p> <img src="https://cdn.jsdelivr.net/gh/Eastwood6/Eastwood6.github.io@master/img/blog/20140724140217143.png" alt></p><p>再来看看cmd窗口里面输出错误信息了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error occurred during initialization of vm</span><br><span class="line"></span><br><span class="line">could not reserve enough space for objectheap</span><br><span class="line"></span><br><span class="line">could not create the java virtual machine</span><br></pre></td></tr></table></figure><p>我们大体可以理解为：因为程序请求不到足够的内存就启动不了vm，导致程序退出。</p><p>那么我们可以来解决这个问题了：申请足够的内存就可以了</p><p>如下操作：在<strong>catalina.bat</strong>中 找到<strong>Execute The Requested Command</strong>下面的</p><p><strong>set JAVA_OPTS</strong>把这一句替换为：</p><p><code>set JAVA_OPTS=%JAVA_OPTS% -server  -XX:MaxNewSize=256m</code></p><p>####三、保存重启后，又出现如下错误</p><p><img src="https://cdn.jsdelivr.net/gh/Eastwood6/Eastwood6.github.io@master/img/blog/1562151422594.png" alt="1562151422594"></p><p>一看就是server.xml没以<code>&lt;/Host&gt;</code>结束 </p><h4 id="四、再次保存重启后，又出现如下错误"><a href="#四、再次保存重启后，又出现如下错误" class="headerlink" title="四、再次保存重启后，又出现如下错误"></a>四、再次保存重启后，又出现如下错误</h4><p><code>java.net.BindException: Address already in use: JVM_Bind</code></p><p> 后来发现原来是在任务管理器中已经打开了一个JVM_Bind,是原来的javaw.exe没有结束掉而又新创建了一个javaw.exe进程。解决方法：打开任务管理器，结束javaw.exe任务，重启tomcat服务器即可。 </p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux war包部署</title>
      <link href="/2019/06/29/Linux%20war%E5%8C%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/06/29/Linux%20war%E5%8C%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-war包部署"><a href="#Linux-war包部署" class="headerlink" title="Linux war包部署"></a>Linux war包部署</h2><p>ssh工具 <strong>Xshell</strong>    </p><p>如果还没配置JDK参照 <a href="https://blog.csdn.net/zwhfyy/article/details/8349788" target="_blank" rel="noopener">linux查看java jdk安装路径和设置环境变量</a></p><ol><li>项目打成war包</li><li><strong>xshell</strong> 通过fstp传输至Linux</li><li>将war包移至<strong>tomcat</strong>的webapp目录</li><li><code>./startup.sh</code>后<strong>tomcat</strong>会自动加载war包成文件夹</li><li><code>tail -f logs/catalina.out</code>查看tomcat运行状态(需要返回上一层目录) </li><li>至此大致完成。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Aliyun ECS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
